# version: "3"

services:
  je-asteroids-web-1:
    container_name: je-asteroids-web-1
    image: je-asteroids-web
    build:
      context: .
      dockerfile: BlazorFrontEnd/Dockerfile
    environment:
      ASTEROIDS_CLUSTER_CONFIG: |
        akka {
          actor {
            provider = cluster
          }
          remote {
            dot-netty.tcp {
              hostname = "je-asteroids-web-1"
              port = 2551
            }
          }
          cluster {
            seed-nodes = [
              "akka.tcp://je-actor-system@je-asteroids-akka-1:2551"
              "akka.tcp://je-actor-system@je-asteroids-akka-2:2551"
              ]
            roles = ["client"]
          }
        }

  je-asteroids-web-2:
    container_name: je-asteroids-web-2
    image: je-asteroids-web
    build:
      context: .
      dockerfile: BlazorFrontEnd/Dockerfile
    environment:
      ASTEROIDS_CLUSTER_CONFIG: |
        akka {
          actor {
            provider = cluster
          }
          remote {
            dot-netty.tcp {
              hostname = "je-asteroids-web-2"
              port = 2551
            }
          }
          cluster {
            seed-nodes = [
              "akka.tcp://je-actor-system@je-asteroids-akka-1:2551"
              "akka.tcp://je-actor-system@je-asteroids-akka-2:2551"
              ]
            roles = ["client"]
          }
        }

  je-asteroids-reverse-proxy:
    container_name: je-asteroids-reverse-proxy
    image: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 2550:80
    restart: unless-stopped

  je-asteroids-signalr:
    container_name: je-asteroids-websocket
    image: signalr-server
    build:
      context: .
      dockerfile: Websocket/Dockerfile

  je-asteroids-akka-1:
    container_name: je-asteroids-akka-1
    image: cluster
    build:
      context: .
      dockerfile: Cluster/Dockerfile
    environment:
      ASTEROIDS_CLUSTER_CONFIG: |
        akka {
          actor {
            provider = cluster
          }
          remote {
            dot-netty.tcp {
              hostname = "je-asteroids-akka-1"
              port = 2551
            }
          }
          cluster {
            seed-nodes = [
              "akka.tcp://je-actor-system@je-asteroids-akka-1:2551"
              "akka.tcp://je-actor-system@je-asteroids-akka-2:2551"
              ]
            roles = ["lobby"]
          }
        }

  je-asteroids-akka-2:
    container_name: je-asteroids-akka-2
    image: cluster
    build:
      context: .
      dockerfile: Cluster/Dockerfile
    environment:
      ASTEROIDS_CLUSTER_CONFIG: |
        akka {
          actor {
            provider = cluster
          }
          remote {
            dot-netty.tcp {
              hostname = "je-asteroids-akka-2"
              port = 2551
            }
          }
          cluster {
            seed-nodes = [
              "akka.tcp://je-actor-system@je-asteroids-akka-1:2551"
              "akka.tcp://je-actor-system@je-asteroids-akka-2:2551"
              ]
            roles = ["lobby"]
          }
        }

  # je-asteroids-akka-3:
  #   container_name: je-asteroids-akka-3
  #   image: cluster
  #   build:
  #     context: .
  #     dockerfile: Cluster/Dockerfile
  #   environment:
  #     ASTEROIDS_CLUSTER_CONFIG: |
  #       akka {
  #         actor {
  #           provider = cluster
  #         }
  #         remote {
  #           dot-netty.tcp {
  #             hostname = "je-asteroids-akka-3"
  #             port = 2551
  #           }
  #         }
  #         cluster {
  #           seed-nodes = [
  #             "akka.tcp://je-actor-system@je-asteroids-akka-1:2551"
  #             "akka.tcp://je-actor-system@je-asteroids-akka-2:2551"
  #             "akka.tcp://je-actor-system@je-asteroids-akka-3:2551"
  #             ]
  #           roles = ["lobby"]
  #         }
  #       }

  je-asteroids-otel-collector:
    container_name: je-asteroids-otel-collector
    image: otel/opentelemetry-collector-contrib
    volumes:
      - ./telemetry/otel-collector-config.yml:/etc/otelcol-contrib/config.yaml
    # ports:
    #   - 1888:1888 # pprof extension
    #   - 8888:8888 # Prometheus metrics exposed by the Collector
    #   - 8889:8889 # Prometheus exporter metrics
    #   - 13133:13133 # health_check extension
    #   - 4317:4317 # OTLP gRPC receiver
    #   - 4318:4318 # OTLP http receiver
    #   - 55679:55679 # zpages extension
    depends_on:
      - je-asteroids-prometheus
      - je-asteroids-loki

  je-asteroids-grafana:
    container_name: je-asteroids-grafana
    image: grafana/grafana
    user: 1000:1000
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./telemetry/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./telemetry/grafana.ini:/etc/grafana/grafana.ini
    depends_on:
      - je-asteroids-prometheus
      - je-asteroids-loki

  je-asteroids-prometheus:
    container_name: je-asteroids-prometheus
    image: prom/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - ./telemetry/prometheus.yml:/etc/prometheus/prometheus.yml
    # ports:
    #   - 9090:9090

  je-asteroids-loki:
    container_name: je-asteroids-loki
    image: grafana/loki
    # ports:
    #   - 3100:3100

volumes:
  grafana_data:
