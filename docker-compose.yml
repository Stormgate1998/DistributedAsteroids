# version: "3"

services:
  je-asteroids-web-1:
    container_name: je-asteroids-web-1
    image: je-asteroids-web
    build:
      context: .
      dockerfile: BlazorFrontEnd/Dockerfile
    environment:
      ASTEROIDS_CLUSTER_CONFIG: |
        akka {
          actor {
            provider = cluster
          }
          remote {
            dot-netty.tcp {
              hostname = "je-asteroids-web-1"
              port = 2551
            }
          }
          cluster {
            seed-nodes = [
              "akka.tcp://je-actor-system@je-asteroids-akka-1:2551"
              "akka.tcp://je-actor-system@je-asteroids-akka-2:2551"
              ]
            roles = ["client"]
          }
        }

  je-asteroids-web-2:
    container_name: je-asteroids-web-2
    image: je-asteroids-web
    build:
      context: .
      dockerfile: BlazorFrontEnd/Dockerfile
    environment:
      ASTEROIDS_CLUSTER_CONFIG: |
        akka {
          actor {
            provider = cluster
          }
          remote {
            dot-netty.tcp {
              hostname = "je-asteroids-web-2"
              port = 2551
            }
          }
          cluster {
            seed-nodes = [
              "akka.tcp://je-actor-system@je-asteroids-akka-1:2551"
              "akka.tcp://je-actor-system@je-asteroids-akka-2:2551"
              ]
            roles = ["client"]
          }
        }

  je-asteroids-reverse-proxy:
    container_name: je-asteroids-reverse-proxy
    image: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 2550:80
    restart: unless-stopped

  je-asteroids-signalr:
    container_name: je-asteroids-websocket
    image: signalr-server
    build:
      context: .
      dockerfile: Websocket/Dockerfile

  je-asteroids-akka-1:
    container_name: je-asteroids-akka-1
    image: cluster
    build:
      context: .
      dockerfile: Cluster/Dockerfile
    environment:
      ASTEROIDS_CLUSTER_CONFIG: |
        akka {
          actor {
            provider = cluster
          }
          remote {
            dot-netty.tcp {
              hostname = "je-asteroids-akka-1"
              port = 2551
            }
          }
          cluster {
            seed-nodes = [
              "akka.tcp://je-actor-system@je-asteroids-akka-1:2551"
              "akka.tcp://je-actor-system@je-asteroids-akka-2:2551"
              ]
            roles = ["lobby"]
          }
        }

  je-asteroids-akka-2:
    container_name: je-asteroids-akka-2
    image: cluster
    build:
      context: .
      dockerfile: Cluster/Dockerfile
    environment:
      ASTEROIDS_CLUSTER_CONFIG: |
        akka {
          actor {
            provider = cluster
          }
          remote {
            dot-netty.tcp {
              hostname = "je-asteroids-akka-2"
              port = 2551
            }
          }
          cluster {
            seed-nodes = [
              "akka.tcp://je-actor-system@je-asteroids-akka-1:2551"
              "akka.tcp://je-actor-system@je-asteroids-akka-2:2551"
              ]
            roles = ["lobby"]
          }
        }

  je-asteroids-akka-3:
    container_name: je-asteroids-akka-3
    image: cluster
    build:
      context: .
      dockerfile: Cluster/Dockerfile
    environment:
      ASTEROIDS_CLUSTER_CONFIG: |
        akka {
          actor {
            provider = cluster
          }
          remote {
            dot-netty.tcp {
              hostname = "je-asteroids-akka-3"
              port = 2551
            }
          }
          cluster {
            seed-nodes = [
              "akka.tcp://je-actor-system@je-asteroids-akka-1:2551"
              "akka.tcp://je-actor-system@je-asteroids-akka-2:2551"
              ]
            roles = ["lobby"]
          }
        }

  je-raft-gateway:
    container_name: je-raft-gateway
    image: gateway
    build:
      context: ./Raft
      dockerfile: Gateway/Dockerfile
    environment:
      - NODES=je-raft-node-1:8080,je-raft-node-2:8080,je-raft-node-3:8080
    restart: unless-stopped

  je-raft-node-1:
    container_name: je-raft-node-1
    image: node
    build:
      context: ./Raft
      dockerfile: Node/Dockerfile
    environment:
      - NODES=je-raft-node-2:8080,je-raft-node-3:8080
    restart: unless-stopped

  je-raft-node-2:
    container_name: je-raft-node-2
    image: node
    build:
      context: ./Raft
      dockerfile: Node/Dockerfile
    environment:
      - NODES=je-raft-node-1:8080,je-raft-node-3:8080
    restart: unless-stopped

  je-raft-node-3:
    container_name: je-raft-node-3
    image: node
    build:
      context: ./Raft
      dockerfile: Node/Dockerfile
    environment:
      - NODES=je-raft-node-1:8080,je-raft-node-2:8080
    restart: unless-stopped

  je-asteroids-otel-collector:
    container_name: je-asteroids-otel-collector
    image: otel/opentelemetry-collector-contrib
    volumes:
      - ./telemetry/otel-collector-config.yml:/etc/otelcol-contrib/config.yaml
    depends_on:
      - je-asteroids-prometheus
      - je-asteroids-loki

  je-asteroids-grafana:
    container_name: je-asteroids-grafana
    image: grafana/grafana
    user: 1000:1000
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./telemetry/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./telemetry/grafana.ini:/etc/grafana/grafana.ini
    depends_on:
      - je-asteroids-prometheus
      - je-asteroids-loki

  je-asteroids-prometheus:
    container_name: je-asteroids-prometheus
    image: prom/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - ./telemetry/prometheus.yml:/etc/prometheus/prometheus.yml

  je-asteroids-loki:
    container_name: je-asteroids-loki
    image: grafana/loki

volumes:
  grafana_data:
