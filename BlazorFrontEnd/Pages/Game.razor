@using Microsoft.AspNetCore.SignalR.Client
@using BlazorFrontEnd.Services
@using Asteroids.Shared.GameObjects
@using System.Threading
@using BlazorFrontEnd.Models
@using Asteroids.Shared.Actors;

@inject RemoteAkkaService AkkaService
@inject SignalRService hubService

@page "/game/{username}/{lobbyname}"

<h1>Welcome @Username</h1>

@if (@gameObject.state == GameState.JOINING)
{
    <div>Joining</div>
} 
else if (@gameObject.state == GameState.PLAYING)
{
    <div>Playing</div>
}else{
    <div> Game Over</div>
}

@if (Lobbyname == Username && gameObject.state == GameState.JOINING)
{
    <button class="btn btn-primary" @onclick="StartGame">Start Game</button>
}

<div
    tabindex="0"
    class="border border-4 border-black rounded-4 position-relative game-board"
    style="
        height: 500px;
        width: 1000px;
        overflow: hidden;"
    @onkeydown="handleKeyDown"
    @onkeyup="handleKeyUp"
    @onblur="handleBlur"
>
    @if (gameObject != null && gameObject.ships != null)
    {

        @foreach (var ship in gameObject.ships)
        {
            @if(ship.Health > 0)
            {
                <div
                    class="position-absolute d-flex flex-column justify-content-center align-items-center"
                    style="
                        top: @(ship.Location.Y)px;
                        left: @(ship.Location.X)px;
                        transform: translate(-50%, -50%);
                        overflow: visible;"
                >
                    <div>@ship.Username</div>
                    <div style="transform: rotate(@((ship.Direction + 90) % 360)deg);">
                        <ShipSVG/>
                    </div>
                    <div>@ship.Health</div>
                </div>
            }
        }

        @if (gameObject.asteroids != null)
        {
            @foreach (var asteroid in gameObject.asteroids)
            {
                <div
                    class="position-absolute d-flex flex-column justify-content-center align-items-center"
                    style="
                        top: @(asteroid.Location.Y)px;
                        left: @(asteroid.Location.X)px;
                        transform: translate(-50%, -50%);
                        overflow: visible;"
                >
                    <div style="rotate: @((asteroid.Direction + 90) % 360)deg;">
                        <AsteroidSVG Size="@(asteroid.Size)" />
                    </div>
                    <div>@asteroid.Health</div>
                </div>
            }
        }

        if (gameObject.bullets != null)
        {
            @foreach (var bullet in gameObject.bullets)
            {
                <div
                    class="position-absolute" 
                    style="
                        top: @(bullet.Location.Y)px;
                        left: @(bullet.Location.X)px;
                        transform: translate(-50%, -50%);"
                >
                    <div
                        style="rotate: @((bullet.Direction + 90) % 360)deg;">
                        <Bullet />
                    </div>
                </div>
            }
        }
    }
</div>
@if (gameObject != null)
{
    @if (gameObject.ships != null)
    {
    <div>
    <table class="table">
        <thead>
            <tr>
                <th>Username</th>
                <th>Score</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in gameObject.ships.OrderByDescending(ship => ship.Score))
            {
                <tr>
                    <td>@item.Username</td>
                    <td>@item.Score</td>
                </tr>
            }
        </tbody>
    </table>

    </div>
    }
}

<style>
    .game-board:focus {
        border-color: blue !important;
        background-color: lightgrey;
    }
</style>

@code {
    [Parameter]
    public string? Username { get; set; }

    [Parameter]
    public string? Lobbyname { get; set; }

    private List<string> list = new();
    private GameStateObject gameObject { get; set; }

    private Timer timer;
    private ShipInput lastShipInput;

    protected override async Task OnInitializedAsync()
    {
        if (gameObject == null)
        {
            gameObject = new();
        }

        await hubService.EnsureStartedAsync();
        hubService.NewGameState += ReceiveGameState;
        AkkaService.GetState(Lobbyname, Username);

        timer = new Timer(_ =>
        {
            SendShipInput();
        }, null, 0, 1);

        lastShipInput = new()
        {
            Username = Username,
            Forward = false,
            Left = false,
            Right = false
        };
    }

    private void ReceiveGameState(GameStateObject game){
        gameObject = game;

        Console.WriteLine($"FRONTEND: Bullets = {game.bullets}");

        Console.WriteLine($"GAME PAGE | Location: ({game.ships.FirstOrDefault()?.Location.X}, {game.ships.FirstOrDefault()?.Location.Y}).");

        if (gameObject == null)
        {
            Console.WriteLine("null object gotten");
        }

        bool usernameFound = gameObject.ships.Any(ship => ship.Username == Username);
        
        if (!usernameFound)
        {
            Console.WriteLine($"Username '{Username}' not found in ships.");
        }

        InvokeAsync(StateHasChanged);
    }

    private async Task StartGame()
    {
        if (Username == Lobbyname)
        {
            AkkaService.StartGame(Username);
        }
    }

    // Player controller
    private string[] controlKeys = ["w", "a", "d", " "];
    private HashSet<string> pressedKeys = new HashSet<string>();
    
    private void handleKeyDown(KeyboardEventArgs e)
    {
        if (controlKeys.Contains(e.Key))
        {
            pressedKeys.Add(e.Key);
        }
    }

    private void handleKeyUp(KeyboardEventArgs e)
    {
        pressedKeys.Remove(e.Key);
    }

    private void handleBlur()
    {
        pressedKeys = new HashSet<string>();
    }

    private void SendShipInput()
    {
        
        InvokeAsync(() =>
        {
            bool forward = pressedKeys.Contains("w");
            bool left = pressedKeys.Contains("a") && !pressedKeys.Contains("d");
            bool right = !pressedKeys.Contains("a") && pressedKeys.Contains("d");
            bool firing = pressedKeys.Contains(" ");

            var input = new ShipInput
            {
                Username = Username,
                Forward = forward,
                Left = left,
                Right = right,
                Firing = firing,
            };

            if (input.Forward != lastShipInput.Forward
                || input.Left != lastShipInput.Left
                || input.Right != lastShipInput.Right
                || input.Firing != lastShipInput.Firing)
            {
                lastShipInput = input;
                
                @* Console.WriteLine($"Forward: {forward}, Left: {left}, Right: {right}"); *@
                Ship? ship = new();
                if(gameObject != null){
                    ship = gameObject.ships.FirstOrDefault(ship => ship.Username == Username);

                }
                if(ship != null && ship.Health > 0){
                    AkkaService.SendShipInput(input);
                }
            }
        });
    }

    public void Dispose()
    {
        hubService.NewGameState -= ReceiveGameState;
        timer?.Dispose();
    }
}